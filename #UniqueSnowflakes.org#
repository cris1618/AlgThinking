#+TITLE: Unique Snowflakes
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Solve a simplified problem
#+begin_src C :results output :tangle simple.c
  // Create a simple function to find identical integers in an array
  void identify_identical(int values[], int n){
    int i, j;

    for(i = 0; i<n; ++i){
      for(j = i + 1; j<n; ++i){
        if(values[i] == values[j]){
          printf("Twin integers found.\n");
          return;
        }

      }

    }
    printf("No Twin Integers are alike.\n");

  }


  int main(){
    int a[5] = {1, 2, 3, 1, 5};
    identify_identical(a, 5);
    return 0;


  }
  #+end_src

#+RESULTS:
: Twin integers found.

** Solving the core problem (Time-Limit Exceeded solution)
#+begin_src C :results output :tangle core.c
  // Function for 'Moving Right' case
  int identical_right(int snow1[], int snow2[], int start){
    int offset, snow2_index;

    for(offset = 0; offset < 6; offset++){
      snow2_index = (start + offset) % 6;

      if(snow1[offset] != snow2[snow2_index]){
        return 0;
      }
    }
    return 1;
  }

  int identical_left(int snow1[], int snow2[], int start){
    int offset, snow2_index;

    for(offset = 0; offset < 6; offset++){
      snow2_index = start - offset;

      if(snow2_index <= 1){
        snow2_index = snow2_index + 6;
      }
      if(snow1[offset] != snow2[snow2_index]){
        return 0;
      }
    }
    return 1;
  }

  int are_identical(int snow1[],int snow2[]){
    int start;

    for(start = 0; start < 6; start++){
      if (identical_right(snow1, snow2, start)){
        return 1;

      }
      if (identical_left(snow1, snow2, start)){
        return 1;
      }
    }
    return 0;
  }


  void identify_identical(int snowflakes[][6], int n){
    int i, j;

    for(i = 0; i<n; i++){
      for(j = 0; j<n; j++){
        if(are_identical(snowflakes[i], snowflakes[j])){
          printf("Twin snowflakes found.\n");
          return;
        }

      } 

    }

    printf("No two snowflakes are alike.");
  }

  #define SIZE 100000
  int main(){
    static int snowflakes[SIZE][6];

    int n, i, j;

    scanf("%d", &n);

    for(i = 0; i<n; i++){
      for(j = 0; j<6; j++){
        scanf("%d", &snowflakes[i][j]);
        are_identical(snowflakes, n);

      }

    }


    return 0;
  }
#+end_src
