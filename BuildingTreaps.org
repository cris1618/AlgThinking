#+TITLE: Buildings Treaps
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> :results output :noweb yes

* Solution 1: Recursion
#+begin_src bash
echo "A/54 I/16 K/39 E/36 B/42 G/55 D/49 H/56 C/58 J/40 F/5" > treap
cat treap 
#+end_src

#+RESULTS:
: A/54 I/16 K/39 E/36 B/42 G/55 D/49 H/56 C/58 J/40 F/5

#+begin_src C :cmdline < treap
  #define MAX_NODES 50000
  #define LABEL_LENGTH 16

  typedef struct treap_node{
    char* label;
    int priority;
  } treap_node;

  // Helper functions
  char* read_label(int size){
    char* str;
    int ch;
    int len = 0;
    str = malloc(size);
    if(str == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    while((ch = getchar()) != EOF && (ch != '/')){
      str[len++] = ch;
      if(len == size){
        size = size * 2;
        str = realloc(str, size);
        if(str == NULL){
          fprintf(stderr, "realloc error\n");
          exit(1);
        }
      }
    }
    str[len] = '\0';
    return str;
  }

  int compare(const void* v1, const void* v2){
    const treap_node* n1 = v1;
    const treap_node* n2 = v2;
    return strcmp(n1->label, n2->label);
  }

  // Outputting the Treap
  int max_priority_index(treap_node treap_nodes[], int left, int right){
    int i; 
    int max_index = left;
    for(i = left+1; i<=right; i++)
      if(treap_nodes[i].priority > treap_nodes[max_index].priority)
        max_index = i;
    return max_index;
  }

  // Solve Function
  void solve(treap_node treap_nodes[], int left, int right){
    int root_index;
    treap_node root;
    if(left > right)
      return;
    root_index = max_priority_index(treap_nodes, left, right);
    root = treap_nodes[root_index];
    printf("(");
    solve(treap_nodes, left, root_index - 1);
    printf("%s/%d", root.label, root.priority);
    solve(treap_nodes, root_index + 1, right);
    printf(")");
  }

  // Main Function
  int main(){
    static treap_node treap_nodes[MAX_NODES];
    int num_nodes, i;
    scanf("%d ", &num_nodes);
    while(num_nodes > 0){
      for(i=0; i<num_nodes; i++){
        treap_nodes[i].label = read_label(LABEL_LENGTH);
        scanf("%d ", &treap_nodes[i].priority);
      }
      qsort(treap_nodes, num_nodes, sizeof(treap_node), compare);
      solve(treap_nodes, 0, num_nodes - 1);
      printf("\n");
      scanf("%d ", &num_nodes);
    }
    return 0;
  }

#+end_src

#+RESULTS:
* Solution 2: Segment Trees
#+begin_src C
  // structure of a node
  typedef struct segtree_node{
    int left, right;
    int max_index;
  } segtree_node;

  typedef struct treap_node{
    char* label;
    int priority;
  } treap_node;

  // Initialize tree segments
  void init_segtree(segtree_node segtree[], int node, int left, int right){
    int mid;
    segtree[node].left = left;
    segtree[node].right = right;
    if(left == right)
      return;

    mid = (left + right) / 2;
    init_segtree(segtree, node * 2, left, mid);
    init_segtree(segtree, node * 2 + 1, mid + 1, right); 
  }

  // Fill the tree
  int fill_segtree(segtree_node segtree[], int node, treap_node treap_nodes[]){
    int left_max, right_max;

    if(segtree[node].left == segtree[node].right){
      segtree[node].max_index = segtree[node].left;
      return segtree[node].max_index;
    }
    left_max = fill_segtree(segtree, node * 2, treap_nodes);
    right_max = fill_segtree(segtree, node * 2 + 1, treap_nodes);

    if(treap_nodes[left_max].priority > treap_nodes[right_max].priority)
      segtree[node].max_index = left_max;
    else
      segtree[node].max_index = right_max;
    return segtree[node].max_index;
  }

#+end_src

#+RESULTS:
