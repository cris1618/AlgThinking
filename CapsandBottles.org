#+TITLE: Caps and Bottle
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> <time.h> :results output :noweb yes

* Solution 1: O(n2), TLE
Test Case 1
#+begin_src bash :results output
  echo "10" > cb
  echo "0" >> cb
  cat cb
#+end_src

#+RESULTS:
: 10
: 0

#+begin_src C :cmdline < cb
  // Solving a Substack
  int main(){
    int n, cup_num, bottle_num, result;
    scanf("%d", &n);
    for(cup_num = 1; cup_num <= n; cup_num++)
      for(bottle_num = 1; bottle_num <= n; bottle_num++){
        printf("0 %d %d\n", cup_num, bottle_num);
        scanf("%d", &result);
        if(result == 0){
          printf("1 %d %d\n", cup_num, bottle_num);
          break;
        }
      }
    return 0;
  }

#+end_src

#+RESULTS:
#+begin_example
0 1 1
1 1 1
0 2 1
1 2 1
0 3 1
1 3 1
0 4 1
1 4 1
0 5 1
1 5 1
0 6 1
1 6 1
0 7 1
1 7 1
0 8 1
1 8 1
0 9 1
1 9 1
0 10 1
1 10 1
#+end_example
* Solution 2: Recursion TLE
#+begin_src C
  #define MAX_N 10000

  void* malloc_safe(int size){
    char* mem = malloc(size);
    if(mem == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    return mem;
  }

  void solve(int cap_nums[], int bottle_nums[], int n){
    int small_count, big_count, cap_num, i, result, matching_bottle;
    int* small_caps = malloc_safe(n * sizeof(int));
    int* small_bottles = malloc_safe(n * sizeof(int));
    int* big_caps = malloc_safe(n * sizeof(int));
    int* big_bottles = malloc_safe(n * sizeof(int));
    if(n == 0)
      return;

    small_count = 0;
    big_count = 0;

    cap_num = cap_nums[0];

    for(i=0; i<n; i++){
      printf("0 %d %d\n", cap_num, bottle_nums[i]);
      scanf("%d", &result);
      if(result == 0){
        printf("1 %d %d\n", cap_num, bottle_nums[i]);
        matching_bottle = bottle_nums[i];
      } else if(result == -1){
        big_bottles[big_count] = bottle_nums[i];
        big_count++;
      } else {
        small_bottles[small_count] = bottle_nums[i];
        small_count++;
      }
    }
    small_count = 0;
    big_count = 0;
    for(i=0; i<n; i++){
      printf("0 %d %d\n", cap_nums[i], matching_bottle);
      scanf("%d", &result);
      if(result == -1){
        small_caps[small_count] = cap_nums[i];
        small_count++;
      }else if(result == 1){
        big_caps[big_count] = cap_nums[i];
        big_count++;
      }
    }
    solve(small_caps, small_bottles, small_count);
    solve(big_caps, big_bottles, big_count);
  }

  // The Main function
  int main(){
    int n, i;
    int cap_nums[MAX_N], bottle_nums[MAX_N];
    scanf("%d", &n);
    for(i=0; i<n; i++){
      cap_nums[i] = i + 1;
      bottle_nums[i] = i + 1;
    }
    solve(cap_nums, bottle_nums, n);
    return 0;
  }

#+end_src

#+RESULTS:
* Solution 3: Adding Randomization
#+begin_src C
  #define MAX_N 10000

  void* malloc_safe(int size){
    char* mem = malloc(size);
    if(mem == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    return mem;
  }

  void solve(int cap_nums[], int bottle_nums[], int n){
    int small_count, big_count, cap_num, i, result, matching_bottle;
    int* small_caps = malloc_safe(n * sizeof(int));
    int* small_bottles = malloc_safe(n * sizeof(int));
    int* big_caps = malloc_safe(n * sizeof(int));
    int* big_bottles = malloc_safe(n * sizeof(int));
    if(n == 0)
      return;

    small_count = 0;
    big_count = 0;

    // Choosing a random cap
    cap_num = cap_nums[rand() % n];

    for(i=0; i<n; i++){
      printf("0 %d %d\n", cap_num, bottle_nums[i]);
      scanf("%d", &result);
      if(result == 0){
        printf("1 %d %d\n", cap_num, bottle_nums[i]);
        matching_bottle = bottle_nums[i];
      } else if(result == -1){
        big_bottles[big_count] = bottle_nums[i];
        big_count++;
      } else {
        small_bottles[small_count] = bottle_nums[i];
        small_count++;
      }
    }
    small_count = 0;
    big_count = 0;
    for(i=0; i<n; i++){
      printf("0 %d %d\n", cap_nums[i], matching_bottle);
      scanf("%d", &result);
      if(result == -1){
        small_caps[small_count] = cap_nums[i];
        small_count++;
      }else if(result == 1){
        big_caps[big_count] = cap_nums[i];
        big_count++;
      }
    }
    solve(small_caps, small_bottles, small_count);
    solve(big_caps, big_bottles, big_count);
  }

  // The Main function
  int main(){
    int n, i;
    int cap_nums[MAX_N], bottle_nums[MAX_N];
    srand((unsigned) time(NULL));
    scanf("%d", &n);
    for(i=0; i<n; i++){
      cap_nums[i] = i + 1;
      bottle_nums[i] = i + 1;
    }
    solve(cap_nums, bottle_nums, n);
    return 0;
  }
#+end_src

#+RESULTS:

** Quicksort Algorithm
#+begin_src C
  #define N 10

  void* malloc_safe(int size){
    char* mem = malloc(size);
    if(mem == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    return mem;
  }

  void swap (int* x, int* y){
    int temp = *x;
    ,*x = *y;
    ,*y = temp;
  }

  void quicksort(int values[], int n){
    int i, small_count, big_count, pivot_index, pivot;
    int* small_values = malloc_safe(n*sizeof(int));
    int* big_values = malloc_safe(n*sizeof(int));
    if(n==0)
      return;

    small_count = 0;
    big_count = 0;

    pivot_index = rand() % n;
    swap(&values[0], &values[pivot_index]);
    pivot = values[0];

    for(i=1; i<n; i++){
      if(values[i] > pivot){
        big_values[big_count] = values[i];
        big_count++;
      }else{
        small_values[small_count] = values[i];
        small_count++;
      }
    }
    quicksort(small_values, small_count);
    quicksort(big_values, big_count);

    for(i=0; i<small_count; i++)
      values[i] = small_values[i];
    values[small_count] = pivot;
    for(i=0; i<big_count; i++)
      values[small_count + i + 1] = big_values[i];
  }

  int main(){
    static int values[N] = {96, 61, 36, 74, 45, 60, 47, 6, 95, 93};
    int i;
    srand((unsigned) time(NULL));

    quicksort(values, N);

    for(i=0; i<N; i++)
      printf("%d ", values[i]); 
    printf("\n");
    return 0;
  }
#+end_src

#+RESULTS:
: 6 36 45 47 60 61 74 93 95 96
