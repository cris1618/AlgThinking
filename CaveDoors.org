#+TITLE: Cave Doors
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> :results output :noweb yes

* Solving Subtasks
First Subtask: Solve the problem when each switch =i=
is associated with door number =i=.

#+name: sub_1
#+begin_src C
  void exploreCave(int n){
    int switch_positions[n], door_for_switch[n];
    int i, result;
    for(i=0; i<n; i++){
      switch_positions[i] = 0;
      door_for_switch[i] = i;
    }

    for(i=0; i<n; i++){
      result = tryCombination(switch_positions));
    if(result == i) // door i is closed
      switch_positions[i] = 1;
  }
  answer(switch_positions, door_for_switch);
  }

#+end_src

#+RESULTS: sub_1

Now let's generalize the solution.
#+name: sub_2
#+begin_src C
  // Function to determine the switch that is associated with door i
  // Using a linear search.
  void set_a_switch(int door, int switch_positions[], int door_for_switch[], int n){
    int i, result;
    int found = 0;

    for(i=0; i<n; i++)
      if(door_for_switch[i] == -1)
        switch_positions[i] = 0;

    result = tryCombination(switch_positions);
    if(result != door){
      for(i=0; i<n; i++)
        if(door_for_switch[i] == -1)
          switch_positions[i] = 1;
    }

    i = 0;
    while(!found){
      if(door_for_switch[i] == -1){
        switch_positions[i] = 1 - switch_positions[i];
        result = tryCombination(switch_positions);
        if(result != door)
          found = 1;
        else
          i++;
      }else
        i++;
    }
    door_for_switch[i] = door;
  }

  void exploreCave(int n){
    int switch_positions[n], door_for_switch[n];
    int i;
    for(i=0; i<n; i++)
      door_for_switch[i] = -1;
    for(i=0; i<n; i++)
      set_a_switch(i, switch_positions, door_for_switch, n);
    answer(switch_positions, door_for_switch);
  }

#+end_src

#+RESULTS: sub_2
