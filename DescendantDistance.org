#+TITLE: Descendant Distance
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

* Reading the Input
#+begin_src C
  // Create new node for non-binary trees
  typedef struct node{
    int num_children;
    struct node **children; //Array to store the tree's childrens
    char *name;
    int score;
  } node;

  // Finding a node
  node *find_node(node *nodes[], int num_nodes, char *name){
    int i;
    for(i=0; i<num_nodes; i++){
      if(strcmp(nodes[i]->name, name) == 0){
        return nodes[i];
      }
    }
    return NULL;
  }

  // Malloc helper function
  // Regular malloc with addition of error checking
  void *malloc_safe(int size){
    char *mem = malloc(size);
    if(mem == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    return mem;
  }

  // Use malloc_safe to create a new node
  node *new_node(char *name){
    node *n = malloc_safe(sizeof(node));
    n->name = name;
    n->num_children = 0;
    return n;
  }

  // Building a family tree
  #define MAX_NAME 10

  int read_tree(node *nodes[], int num_lines){
    node *parent_node, *child_node;
    char *parent_name, *child_name;

    int i, j, num_children;
    int num_nodes = 0;
    for(i = 0; i<num_lines; i++){
      parent_name = malloc_safe(MAX_NAME + 1);
      scanf("%s", parent_name);
      scanf("%d", &num_children);
      parent_node = find_node(nodes, num_nodes, parent_name);
      if(parent_node == NULL){
        parent_node = new_node(parent_name);
        nodes[num_nodes] = parent_node;
        num_nodes++;
      }
      else
        free(parent_name);
    }
    parent_node->children = malloc_safe(sizeof(node) * num_children);
    parent_node->num_children = num_children;
    for(j = 0; j < num_children; j++){
      child_name = malloc_safe(MAX_NAME + 1);
      scanf("%s", child_name);
      child_node = find_node(nodes, num_nodes, child_name);
      if(child_node == NULL){
        child_node = new_node(child_name);
        nodes[num_nodes] = child_node;
        num_nodes++;
      }
      else
        free(child_name);
      parent_node->children[j] = child_node;
    }
    return num_nodes;
  }

#+end_src

#+RESULTS:

* Number of Descendants from one Node
#+begin_src C
  typedef struct node{
    int num_children;
    struct node **children; //Array to store the tree's childrens
    char *name;
    int score;
  } node;

  // Function to find the number of Descendants 
  // at distance d from the node (Using Recursion).
  int score_one(node *n, int d){
    int total, i;
    if(d == 1){
      return n->num_children;
    }
    total = 0;
    for(i=0; i<n->num_children; i++){
      total = total + score_one(n->children[i], d-1);
    }
    return total;
  }

#+end_src

#+RESULTS:


* Number of Descendants from all Nodes
#+begin_src C
  typedef struct node{
    int num_children;
    struct node **children; //Array to store the tree's childrens
    char *name;
    int score;
  } node;

  // Function to find the number of Descendants 
  // at distance d from the node (Using Recursion).
  int score_one(node *n, int d){
    int total, i;
    if(d == 1){
      return n->num_children;
    }
    total = 0;
    for(i=0; i<n->num_children; i++){
      total = total + score_one(n->children[i], d-1);
    }
    return total;
  }


  // To calculate the number of Descendants at distance d for all nodes,
  // we simply put score_one in a loop
  void score_all(node **nodes, int num_nodes, int d){
    int i;
    for(i=0; i<num_nodes; i++){
      nodes[i]->score = score_one(nodes[i], d);
    }
  }

  // Sorting Nodes
  int compare(const void *v1, const void *v2){
    const node *n1 = *(const node **)v1;
    const node *n2 = *(const node **)v2;
    if(n1->score > n2->score)
      return -1;
    if(n1->score < n2->score)
      return 1;
    return strcmp(n1->name, n2->name);
  }

  // Outputting the information
  void output_info(node *nodes[], int num_nodes){
    int i = 0;
    while(i < 3 && i < num_nodes && nodes[i] -> score > 0){
      printf("%s %d\n", nodes[i]->name, nodes[i]->score);
      i++;
      while(i < num_nodes && nodes[i]->score == nodes[i-1]->score){
        printf("%s %d\n", nodes[i]->name, nodes[i]->score);
        i++;
      }
    }
  } 



#+end_src

#+RESULTS:

* The Main function and problem solution 
#+begin_src C 
  // Import all previous functions
  typedef struct node{
    int num_children;
    struct node **children; //Array to store the tree's childrens
    char *name;
    int score;
  } node;

  // Finding a node
  node *find_node(node *nodes[], int num_nodes, char *name){
    int i;
    for(i=0; i<num_nodes; i++){
      if(strcmp(nodes[i]->name, name) == 0){
        return nodes[i];
      }
    }
    return NULL;
  }

  // Malloc helper function
  // Regular malloc with addition of error checking
  void *malloc_safe(int size){
    char *mem = malloc(size);
    if(mem == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    return mem;
  }

  // Use malloc_safe to create a new node
  node *new_node(char *name){
    node *n = malloc_safe(sizeof(node));
    n->name = name;
    n->num_children = 0;
    return n;
  }

  // Building a family tree
  #define MAX_NAME 10

  int read_tree(node *nodes[], int num_lines){
    node *parent_node, *child_node;
    char *parent_name, *child_name;

    int i, j, num_children;
    int num_nodes = 0;
    for(i = 0; i<num_lines; i++){
      parent_name = malloc_safe(MAX_NAME + 1);
      scanf("%s", parent_name);
      scanf("%d", &num_children);
      parent_node = find_node(nodes, num_nodes, parent_name);
      if(parent_node == NULL){
        parent_node = new_node(parent_name);
        nodes[num_nodes] = parent_node;
        num_nodes++;
      }
      else
        free(parent_name);
    }
    parent_node->children = malloc_safe(sizeof(node) * num_children);
    parent_node->num_children = num_children;
    for(j = 0; j < num_children; j++){
      child_name = malloc_safe(MAX_NAME + 1);
      scanf("%s", child_name);
      child_node = find_node(nodes, num_nodes, child_name);
      if(child_node == NULL){
        child_node = new_node(child_name);
        nodes[num_nodes] = child_node;
        num_nodes++;
      }
      else
        free(child_name);
      parent_node->children[j] = child_node;
    }
    return num_nodes;
  }

  // Function to find the number of Descendants 
  // at distance d from the node (Using Recursion).
  int score_one(node *n, int d){
    int total, i;
    if(d == 1){
      return n->num_children;
    }
    total = 0;
    for(i=0; i<n->num_children; i++){
      total = total + score_one(n->children[i], d-1);
    }
    return total;
  }


  // To calculate the number of Descendants at distance d for all nodes,
  // we simply put score_one in a loop
  void score_all(node **nodes, int num_nodes, int d){
    int i;
    for(i=0; i<num_nodes; i++){
      nodes[i]->score = score_one(nodes[i], d);
    }
  }

  // Sorting Nodes
  int compare(const void *v1, const void *v2){
    const node *n1 = *(const node **)v1;
    const node *n2 = *(const node **)v2;
    if(n1->score > n2->score)
      return -1;
    if(n1->score < n2->score)
      return 1;
    return strcmp(n1->name, n2->name);
  }

  // Outputting the information
  void output_info(node *nodes[], int num_nodes){
    int i = 0;
    while(i < 3 && i < num_nodes && nodes[i] -> score > 0){
      printf("%s %d\n", nodes[i]->name, nodes[i]->score);
      i++;
      while(i < num_nodes && nodes[i]->score == nodes[i-1]->score){
        printf("%s %d\n", nodes[i]->name, nodes[i]->score);
        i++;
      }
    }
  } 

  // The Main Function
  #define MAX_NODES 1000

  int main(){
    int num_cases, case_num;
    int n, d, num_nodes;
    node **nodes = malloc_safe(sizeof(node) * MAX_NODES);
    scanf("%d", &num_cases);
    for(case_num = 1; case_num <= num_cases; case_num++){
      printf("Tree %d:\n", case_num);
      scanf("%d %d", &n, &d);
      num_nodes = read_tree(nodes, n);
      score_all(nodes, num_nodes, d);
      qsort(nodes, num_nodes, sizeof(node*), compare);
      output_info(nodes, num_nodes);
      if(case_num < num_cases)
        printf("\n");

    }
    return 0;
  }
#+end_src

#+RESULTS:
