#+TITLE: Drawer Chore
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> :results output :noweb yes

* Solution
#+begin_src bash :results output
  echo "6 7" > drac
  echo "1 2" >> drac
  echo "2 6" >> drac
  echo "6 4" >> drac
  echo "5 3" >> drac
  echo "5 7" >> drac
  echo "2 5" >> drac
  cat drac
#+end_src

#+RESULTS:
: 6 7
: 1 2
: 2 6
: 6 4
: 5 3
: 5 7
: 2 5

#+begin_src C :cmdline < drac
  #define MAX_DRAWERS 300000

  // Find function
  int find(int drawer, int parent[]){
    int set = drawer, temp;
    while(parent[set] != set)
      set = parent[set];
    while(parent[drawer] != set){
      temp = parent[drawer];
      parent[drawer] = set;
      drawer = temp;
    }
    return set;
  }

  // Union function
  void union_sets(int drawer1, int drawer2, int parent[]){
    int set1, set2;
    set1 = find(drawer1, parent);
    set2 = find(drawer2, parent);
    parent[set1] = set2;
    if(set1 == set2)
      parent[set2] = 0;
    printf("LADICA\n");
  }

  // Main function
  int main(){
    static int parent[MAX_DRAWERS + 1];
    int num_items, num_drawers, i;
    int drawer_a, drawer_b;
    scanf("%d%d", &num_items, &num_drawers);
    parent[0] = 0;
    for(i=1; i<=num_drawers; i++)
      parent[i] = i;

    for(i=1; i<=num_items; i++){
      scanf("%d%d", &drawer_a, &drawer_b);

      if(find(drawer_a, parent) == drawer_a)
        union_sets(drawer_a, drawer_b, parent);

      else if(find(drawer_b, parent) == drawer_b)
        union_sets(drawer_b, drawer_a, parent);

      else if(find(drawer_a, parent) > 0)
        union_sets(drawer_a, drawer_b, parent);

      else if(find(drawer_b, parent) > 0)
        union_sets(drawer_b, drawer_a, parent);

      else
        printf("SMECE\n");
    }

    return 0;
  }

#+end_src

#+RESULTS:
: LADICA
: LADICA
: LADICA
: LADICA
: LADICA
: LADICA
