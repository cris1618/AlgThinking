#+TITLE: Feeding Ants
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> :results output

* Solution
#+begin_src bash :results output
  echo "6" > fa
  echo "1 2 20 0" >> fa
  echo "1 3 50 0" >> fa
  echo "1 4 30 1" >> fa 
  echo "4 5 50 0" >> fa
  echo "4 6 50 0" >> fa
  echo "-1 2 9 -1 7 8" >> fa
  cat fa

#+end_src

#+RESULTS:
: 6
: 1 2 20 0
: 1 3 50 0
: 1 4 30 1
: 4 5 50 0
: 4 6 50 0
: -1 2 9 -1 7 8

#+begin_src C :cmdline < fa
  #define MAX_NODES 1000

  typedef struct edge{
    int to_node, percentage, superpipe;
    struct edge* next;
  }edge;

  int can_feed(int node, double liquid, edge* adj_list[], int liquid_needed[]){
    edge* e;
    int ok;
    double down_pipe;

    if(liquid_needed[node] != -1)
      return liquid >= liquid_needed[node];

    e = adj_list[node];
    ok = 1;
    while(e && ok){
      down_pipe = liquid * e->percentage / 100;
      if(e->superpipe)
        down_pipe = down_pipe * down_pipe;
      if(!can_feed(e->to_node, down_pipe, adj_list, liquid_needed))
        ok = 0;
      e = e->next;
    }
    return ok;
  } 

  int main(){
    static edge* adj_list[MAX_NODES + 1] = {NULL};
    static int liquid_needed[MAX_NODES + 1];
    int num_nodes, i;
    int from_node, to_node, percentage, superpipe;
    edge* e;

    scanf("%d", &num_nodes);

    for(i=0; i<num_nodes - 1; i++){
      scanf("%d%d%d%d", &from_node, &to_node, &percentage, &superpipe);
      e = malloc(sizeof(edge));
      if(e==NULL){
        fprintf(stderr, "malloc error\n");
        exit(1);
      }
      e->to_node = to_node; 
      e->percentage = percentage;
      e->superpipe = superpipe;
      e->next = adj_list[from_node];
      adj_list[from_node] = e;
    }

    for(i=1; i<=num_nodes; i++)
      scanf("%d", &liquid_needed[i]);
    solve(adj_list, liquid_needed);

    return 0;
  }

#+end_src

#+RESULTS:
