#+TITLE: Halloween Haul
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Trees and Recursion
#+begin_src C 
  #include <stdio.h>
  #include <stdlib.h>

  // General structure of a Tree's node
  typedef struct node{
    int candy;
    struct node *left, *right;
  } node;

  // Building a Tree
  // work bottom-up, uniting subtrees until we reach the root
  /* node *four = malloc(sizeof(node));
     four -> candy = 4;
     four -> left = NULL;
     four -> right = NULL;

     node *nine = malloc(sizeof(node));
     nine -> candy = 9;
     nine -> left = NULL;
     nine -> right = NULL;

     // Unite the two nodes under a common parent
     node *B = malloc(sizeof(node));
     B -> left = four;
     B -> right = nine;*/

  // Writing two functions to automate the process
  node *new_house(int candy){
    node *house = malloc(sizeof(node));
    if(house == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    house -> candy = candy;
    house -> left = NULL;
    house -> right = NULL;
    return house;
  }

  node *non_house(node *left, node *right){
    node *nonhouse = malloc(sizeof(node));
    if(nonhouse == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    nonhouse -> left = left;
    nonhouse -> right = right;
    return nonhouse;
  }


  int main(){
    // Use new helper functions to recreate the nodes
    node *four = new_house(4);
    node *nine = new_house(9);
    node *B = non_house(four, nine);
    node *fifteen = new_house(15);
    node *C = non_house(B, fifteen);

    // Printing exercise
    printf("%d\n", C->right->candy);
    printf("%d\n", C->left->right->candy);
    // Print a pointer value instead of a candy value
    printf("%d\n", C->left->left);
    printf("%d\n", C->candy);
  }

#+end_src 

#+RESULTS:
: 15
: 9
: 1926533792
: 0

** Implementing a Stack
#+begin_src C
  #define SIZE 255

  // General structure of a Tree's node
  typedef struct node{
    int candy;
    struct node *left, *right;
  } node;

  // Create a struct to store the array and highest_used
  typedef struct stack{
    node * values[SIZE];
    int highest_used; 
  } stack;

  // Write a function to create new stacks
  stack *new_stack(void){
    stack *s = malloc(sizeof(stack));
    if(s == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    s -> highest_used = -1;
    return s;
  }

  // Functions to push and pop from a stack
  void push_stack(stack *s, node *value){
    s->highest_used++;
    s->values[s->highest_used] = value;
  }

  node * pop_stack(stack *s){
    node * ret = s->values[s->highest_used];
    s -> highest_used--;
    return ret;
  }

  // Determine if the stack is empty
  int is_empty_stack(stack *s){
    return s->highest_used == -1;
  }

  // Import functions previously defined
  node *new_house(int candy){
    node *house = malloc(sizeof(node));
    if(house == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    house -> candy = candy;
    house -> left = NULL;
    house -> right = NULL;
    return house;
  }

  node *non_house(node *left, node *right){
    node *nonhouse = malloc(sizeof(node));
    if(nonhouse == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    nonhouse -> left = left;
    nonhouse -> right = right;
    return nonhouse;
  }

  // Small example to implement stack,
  // before solving the main problem
  int main(){
    stack *s;
    s = new_stack();

    node *n, *n1, *n2, *n3;
    n1 = new_house(20);
    n2 = new_house(30);
    n3 = new_house(10);
    push_stack(s, n1);
    push_stack(s, n2);
    push_stack(s, n3);
    while (!is_empty_stack(s)){
      n = pop_stack(s);
      printf("%d\n", n->candy);
    }
    return 0;
  }

#+end_src

#+RESULTS:
: 10
: 30
: 20

** Collecting all the Candy
#+begin_src C
  // Import all the needed functions
  #define SIZE 255

  // General structure of a Tree's node
  typedef struct node{
    int candy;
    struct node *left, *right;
  } node;

  // Create a struct to store the array and highest_used
  typedef struct stack{
    node * values[SIZE];
    int highest_used; 
  } stack;

  // Write a function to create new stacks
  stack *new_stack(void){
    stack *s = malloc(sizeof(stack));
    if(s == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    s -> highest_used = -1;
    return s;
  }

  // Functions to push and pop from a stack
  void push_stack(stack *s, node *value){
    s->highest_used++;
    s->values[s->highest_used] = value;
  }

  node * pop_stack(stack *s){
    node * ret = s->values[s->highest_used];
    s -> highest_used--;
    return ret;
  }

  // Determine if the stack is empty
  int is_empty_stack(stack *s){
    return s->highest_used == -1;
  }

  // Import functions previously defined
  node *new_house(int candy){
    node *house = malloc(sizeof(node));
    if(house == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    house -> candy = candy;
    house -> left = NULL;
    house -> right = NULL;
    return house;
  }

  node *non_house(node *left, node *right){
    node *nonhouse = malloc(sizeof(node));
    if(nonhouse == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    nonhouse -> left = left;
    nonhouse -> right = right;
    return nonhouse;
  }

  // Write helper function to calculate the total amount
  // of candy in the tree
  int tree_candy(node *tree){
    int total = 0;
    stack *s = new_stack();
    while(tree != NULL){
      if(tree->left && tree->right){
        push_stack(s, tree->left);
        tree = tree->right;
      }else{
        total = total + tree->candy;
        if(is_empty_stack(s))
          tree = NULL;
        else
          tree = pop_stack(s);
      }

    }
    return total;
  }

  #+end_src

#+RESULTS:

*** A Completely different solution (Using Recursive) 
#+begin_src C
  // Import needed structure/functions from previous code blocks
  typedef struct node{
    int candy;
    struct node *left, *right;
  } node;


  //Implement Rule 1 and Rule 2 of the recursive definition for this problem 
  int tree_candy(node *tree){
    if(!tree->left && !tree->right){
      return tree->candy;
    }
    return tree_candy(tree->left) + tree_candy(tree->right);
  } 

  // Practicing Recursion
  int tree_nodes(node *tree){
    if(!tree->left && !tree->right){
      return 1;
    }
    return 1 + tree_nodes(tree->left) + tree_nodes(tree->right);
  }

  int tree_leaves(node *tree){
    if(!tree->left && !tree->right){
      return 1;
    }
    return tree_leaves(tree->left) + tree_leaves(tree->right);
  }
#+end_src

#+RESULTS:

** Walking the Minimum Number of Streets
#+begin_src C
  typedef struct node{
    int candy;
    struct node *left, *right;
  } node;

  // Using recursive function
  int tree_streets(node *tree){
    if(!tree->left && !tree->right){
      return 0;
    }
    return 4 + tree_streets(tree->left) + tree_streets(tree->right);
  }

  int tree_candy(node *tree){
    if(!tree->left && !tree->right){
      return tree->candy;
    }
    return tree_candy(tree->left) + tree_candy(tree->right);
  } 

  // Calculating tree height
  int max(int x, int y){
    if(x>y){
      return x;
    }else{
      return y;
    }
  }

  int tree_height(node *tree){
    if(!tree->left && !tree->right){
      return 0;
    }
    return max(tree_height(tree->left), tree_height(tree->right)) + 1;
  }


  // Function to solve the final problem
  void tree_solve(node *tree){
    int candy = tree_candy(tree);
    int height = tree_height(tree);
    int num_streets = tree_streets(tree) - height;
    printf("%d %d\n", num_streets, candy);
  }
#+end_src

#+RESULTS:

** Reading the input And solving the problem
**** Representing a Tree as a string
#+begin_src C
  #define SIZE 255
  #define TEST_CASES 5

  typedef struct node{
    int candy;
    struct node *left, *right;
  } node;

  // Using recursive function
  int tree_streets(node *tree){
    if(!tree->left && !tree->right){
      return 0;
    }
    return 4 + tree_streets(tree->left) + tree_streets(tree->right);
  }

  int tree_candy(node *tree){
    if(!tree->left && !tree->right){
      return tree->candy;
    }
    return tree_candy(tree->left) + tree_candy(tree->right);
  } 

  // Calculating tree height
  int max(int x, int y){
    if(x>y){
      return x;
    }else{
      return y;
    }
  }

  int tree_height(node *tree){
    if(!tree->left && !tree->right){
      return 0;
    }
    return max(tree_height(tree->left), tree_height(tree->right)) + 1;
  }


  // Function to solve the final problem
  void tree_solve(node *tree){
    int candy = tree_candy(tree);
    int height = tree_height(tree);
    int num_streets = tree_streets(tree) - height;
    printf("%d %d\n", num_streets, candy);
  }

  
  node *read_tree_helper(char *line, int *pos){
    node *tree;
    tree = malloc(sizeof(node));
    if(tree == NULL){
      fprintf(stderr, "malloc error\n");
      exit(1);
    }
    if(line[*pos] == '('){
      (*pos)++;
      tree -> left = read_tree_helper(line, pos);
      (*pos)++;
      tree -> right = read_tree_helper(line, pos);
      (*pos)++;
      return tree;
    }else{
      tree -> left = NULL;
      tree -> right = NULL;
      tree -> candy = line[*pos] - '0';
      (*pos);
      if(line[*pos] != ')' && line[*pos] != ' ' && line[*pos] != '\0'){
        tree -> candy = tree -> candy *10 + line[*pos] - '0';
        (*pos)++;
      }
      return tree;
    }
  }
 
  // Function to read a tree
  node *read_tree(char *line){
    int pos = 0;
    return read_tree_helper(line, &pos);
  }

  // Write the main function
  int main(){
    int i;

    char line[SIZE + 1];
    node *tree;
    for(i=0; i < TEST_CASES; i++){
      gets(line);
      tree = read_tree(line);
      tree_solve(tree);
    }
    return 0;
  }

#+end_src

#+RESULTS:
: 0 176
: 0 176
: 0 176
: 0 176
: 0 176
