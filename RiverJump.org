#+TITLE: River jump
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> :results output

* Solution 
#+begin_src bash :results output
  echo "12 2 1" > rj
  echo "5" >> rj
  echo "8" >> rj
  cat rj
#+end_src

#+RESULTS:
: 12 2 1
: 5
: 8

#+begin_src C :cmdline < rj
  #define MAX_ROCKS 50000

  int can_make_min_distance(int distance, int rocks[], int num_rocks, int num_remove, int length){
    int i;
    int removed = 0, prev_rock_location = 0, cur_rock_location = 0;
    if(length<distance)
      return 0;

    for(i=0; i<num_rocks; i++){
      cur_rock_location = rocks[i];
      if(cur_rock_location - prev_rock_location < distance)
        removed++;
      else
        prev_rock_location = cur_rock_location;
    }
    if(length - prev_rock_location < distance)
      removed++;
    return removed <= num_remove;
  }

  void solve(int rocks[], int num_rocks, int num_remove, int length){
    int low, high, mid;
    low = 0;
    high = length + 1;
    while(high-low > 1){
      mid = (low+high)/2;
      if(can_make_min_distance(mid, rocks, num_rocks, num_remove, length))
        low = mid;
      else
        high = mid;
    }
    printf("%d\n", high);
  }

  int compare(const void* v1, const void* v2){
    int num1 = *(const int*)v1;
    int num2 = *(const int*)v2;
    return num1-num2;
  }

  // Main function, reading the input
  int main(){
    static int rocks[MAX_ROCKS];
    int length, num_rocks, num_remove, i;
    scanf("%d%d%d", &length, &num_rocks, &num_remove);
    for(i=0; i<num_rocks; i++)
      scanf("%d", &rocks[i]);
    qsort(rocks, num_rocks, sizeof(int), compare);
    solve(rocks, num_rocks, num_remove, length);
    return 0;
  }

#+end_src

#+RESULTS:
: 6
