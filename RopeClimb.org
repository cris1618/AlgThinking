#+TITLE: Rope Climb
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

* Solution 1: Finding the Moves
** Implementing Breadth-First Search

   #+begin_src bash :results output
     echo "10 4 1" > rp
     echo "8 9" >> rp
     cat rp
   #+end_src

   #+RESULTS:
   : 10 4 1
   : 8 9

   #+begin_src C :results output :cmdline < rp
     #include <stdio.h>
     #define SIZE 1000000

     typedef int board[SIZE*2];
     typedef int positions[SIZE*2];

     void add_position(int from_height, int to_height, int max_height, positions new_positions, int* num_new_positions, int itching[], board min_moves){
       if(to_height <= max_height && itching[to_height] == 0 && min_moves[to_height] == -1){
         min_moves[to_height] = 1 + min_moves[from_height];
         new_positions[*num_new_positions] = to_height;
         (*num_new_positions)++;
       }
     }

     void find_distance(int target_height, int jump_distance, int itching[], board min_moves){
       static positions cur_positions, new_positions;
       int num_cur_positions, num_new_positions;
       int i, j, from_height;
       for(i=0; i<target_height*2; i++)
         min_moves[i] = -1;
       min_moves[0] = 0;
       cur_positions[0] = 0;
       num_cur_positions = 1;

       while(num_cur_positions > 0){
         num_new_positions = 0;
         for(i=0; i<num_cur_positions; i++){
           from_height = cur_positions[i];
           add_position(from_height, from_height+jump_distance, target_height*2 -1, new_positions, &num_new_positions, itching, min_moves);
           for(j=0; j<from_height; j++)
             add_position(from_height, j, target_height*2-1, new_positions, &num_new_positions, itching, min_moves); 
         }
         num_cur_positions = num_new_positions;
         for(i=0; i<num_cur_positions; i++)
           cur_positions[i] = new_positions[i];
       }

     }

     void solve(int target_height, board min_moves){
       int best = -1;
       int i;
       for(i=target_height; i<target_height*2; i++)
         if(min_moves[i] != -1 && (best == -1 || min_moves[i] < best))
           best = min_moves[i];
       printf("%d\n", best);
     }

     // The main function
     int main(){
       int target_height, jump_distance, num_itching_sections;
       static int itching[SIZE*2] = {0};
       static board min_moves;
       int i, j, itch_start, itch_end;
       scanf("%d%d%d", &target_height, &jump_distance, &num_itching_sections);
       for(i=0; i<num_itching_sections; i++){
         scanf("%d%d", &itch_start, &itch_end);
         for(j=itch_start; j<itch_end; j++)
           itching[j] = 1;
       }
       find_distance(target_height, jump_distance, itching, min_moves);
       solve(target_height, min_moves);
     }
  #+end_src

  #+RESULTS:
  : 4
* Solution 2: A Remodel
 #+begin_src bash :results output
     echo "10 4 1" > rp2
     echo "8 9" >> rp2
     cat rp2
   #+end_src

   #+RESULTS:
   : 10 4 1
   : 8 9
 #+begin_src C :results output :cmdline < rp2
   #include <stdio.h>
   #define SIZE 1000000

   typedef struct position{
     int height, state;
   }position;

   typedef int board[SIZE*2][2];
   typedef position positions[SIZE * 4];

   // Jump up Function
   void add_position_up(int from_height, int to_height, int max_height, positions pos, int* num_pos, int itching[], board min_moves){
     int distance = 1 + min_moves[from_height][0];
     if(to_height <= max_height && itching[to_height] == 0 && (min_moves[to_height][0] == -1 || min_moves[to_height][0] > distance)){
       min_moves[to_height][0] = distance;
       pos[*num_pos] = (position){to_height, 0};
       (*num_pos)++;
     }
   }

   // Falling Down
   void add_position_down(int from_height, int to_height, positions pos, int* num_pos, board min_moves){
     int distance = min_moves[from_height][1];
     if(to_height >= 0 && (min_moves[to_height][1] == -1 || min_moves[to_height][1] > distance)){
       min_moves[to_height][1] = distance;
       pos[*num_pos] = (position){to_height, 1};
       (*num_pos)++;
     }
   }

   // Move from state 0 to state 1
   void add_position_01(int from_height, positions pos, int *num_pos, board min_moves){
     int distance = 1 + min_moves[from_height][0];
     if(min_moves[from_height][1] == -1 || min_moves[from_height][1] > distance){
       min_moves[from_height][1] = distance;
       pos[*num_pos] = (position){from_height, 1};
       (*num_pos);
     }
   }

   // Move from state 1 to state 0
   void add_position_10(int from_height, positions pos, int* num_pos, int itching[], board min_moves){
     int distance = min_moves[from_height][1];
     if(itching[from_height] == 0 && (min_moves[from_height][0] == -1 || min_moves[from_height][0] > distance)){
       min_moves[from_height][0] = distance;
       pos[*num_pos] = (position){from_height, 0};
       (*num_pos)++;
     }
   }

   void find_distances(int target_height, int jump_distance, int itching[], board min_moves){
     static positions cur_positions, new_positions;
     int num_cur_positions, num_new_positions;
     int i, j, from_height, from_state;
     for(i=0; i<target_height * 2; i++)
       for(j=0; j<2; j++)
         min_moves[i][j] = -1;
     min_moves[0][0] = 0;
     cur_positions[0] = (position){0,0};
     num_cur_positions = 1;

     while(num_cur_positions > 0){
       num_new_positions = 0;
       for(i=0; i<num_cur_positions; i++){
         from_height = cur_positions[i].height;
         from_state = cur_positions[i].state;

         if(from_state == 0){
           add_position_up(from_height, from_height+jump_distance, target_height*2 -1, new_positions, &num_new_positions, itching, min_moves);
           add_position_01(from_height, new_positions, &num_new_positions, min_moves);
         }else{
           add_position_down(from_height, from_height-1, cur_positions, &num_cur_positions, min_moves);
           add_position_10(from_height, cur_positions, &num_cur_positions, itching, min_moves);
         }
       }
       num_cur_positions = num_new_positions;
       for(i=0; i<num_cur_positions; i++)
         cur_positions[i] = new_positions[i];
     }
   }
#+end_src

#+RESULTS:
