#+TITLE: Social Networks
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> <stdlib.h> <string.h> :results output :noweb yes

* Solution 1: BFS
#+begin_src bash :results output
  echo "7 6" > sn
  echo "11" >> sn
  echo "A 1 4" >> sn
  echo "A 4 5" >> sn
  echo "A 3 6" >> sn
  echo "E 1 5" >> sn
  echo "E 2 5" >> sn
  echo "A 1 5" >> sn
  echo "A 2 5" >> sn
  echo "A 4 3" >> sn
  echo "S 4" >> sn
  echo "S 7 6" >> sn
  echo "S 4" >> sn
  cat sn
#+end_src

#+RESULTS:
#+begin_example
7 6
11
A 1 4
A 4 5
A 3 6
E 1 5
E 2 5
A 1 5
A 2 5
A 4 3
S 4
S 7 6
S 4
#+end_example

#+begin_src C :cmdline < sn
  #define MAX_PEOPLE 100000

  typedef struct edge{
    int to_person;
    struct edge* next;
  }edge;

  // BFS implementation
  void add_position(int from_person, int to_person, int new_positions[], int* num_new_positions, int min_moves[]){
    if(min_moves[to_person] == -1){
      min_moves[to_person] = 1 + min_moves[from_person];
      new_positions[*num_new_positions] = to_person;
      (*num_new_positions)++;
    }
  }

  void find_distances(edge* adj_list[], int person, int num_people, int min_moves[]){
    static int cur_positions[MAX_PEOPLE + 1], new_positions[MAX_PEOPLE +1];
    int num_cur_positions, num_new_positions;
    int i, from_person;
    edge* e;

    for(i = 1; i<=num_people; i++)
      min_moves[i] = -1;
    min_moves[person] = 0;

    cur_positions[0] = person;
    num_cur_positions = 1;

    while(num_cur_positions > 0){
      num_new_positions = 0;
      for(i=0; i < num_cur_positions; i++){
        from_person = cur_positions[i];
        e = adj_list[from_person];

        while(e){
          add_position(from_person, e->to_person, new_positions, &num_new_positions, min_moves);
          e = e->next;
        }
      }

      num_cur_positions = num_new_positions;
      for(i=0; i<num_cur_positions; i++)
        cur_positions[i] = new_positions[i];
    }
  }

  // Find the size
  int size(int num_people, int min_moves[]){
    int i, total = 0;
    for(i = 1; i<=num_people; i++)
      if(min_moves[i] != -1)
        total++;
    return total;
  }

  // Main Function
  int main(){
    static edge* adj_list[MAX_PEOPLE + 1] = {NULL};
    static int min_moves[MAX_PEOPLE + 1];

    int num_people, num_community, num_ops, i;
    char op;
    int person1, person2;
    edge* e;
    int size1, size2, same_community;
    scanf("%d%d", &num_people, &num_community);
    scanf("%d", &num_ops);

    for(i=0; i<num_ops; i++){
      scanf(" %c", &op);
      if(op='A'){
        scanf("%d%d", &person1, &person2);
        find_distances(adj_list, person1, num_people, min_moves);
        size1 = size(num_people, min_moves);
        same_community = 0;
        if(min_moves[person2] != -1)
          same_community = 1;
        find_distances(adj_list, person2, num_people, min_moves);
        size2 = size(num_people, min_moves);
        if(same_community || size1 + size2 <= num_community){
          e = malloc(sizeof(edge));
          if(e == NULL){
            fprintf(stderr, "malloc error\n");
            exit(1);
          }
          e -> to_person = person1;
          e -> next = adj_list[person2];
          adj_list[person2] = e;
        }
      }

      else if(op == 'E'){
        scanf("%d%d", &person1, &person2);
        find_distances(adj_list, person1, num_people, min_moves);
        if(min_moves[person2] != -1)
          printf("Yes\n");
        else
          printf("No\n");
      }

      else {
        scanf("%d", &person1);
        find_distances(adj_list, person1, num_people, min_moves);
        printf("%d\n", size(num_people, min_moves));
      }
    }
    return 0;
  }
#+end_src

#+RESULTS:
* Solution 2: Union-Find
#+name: union_find
#+begin_src C
  #define MAX_PEOPLE 100000

  // Array based. TIME LIMIT
  int find1(int person, int community_of[]){
    return community_of[person];
  }


  void union_communities1(int person1, int person2, int community_of[], int num_people){
    int community1, community2, i;
    community1 = find1(person1, community_of);
    community2 = find1(person2, community_of);
    for(i=1; i<=num_people; i++)
      if(community_of[i] == community1)
        community_of[i] = community2;
  } 

  // Tree based solution
  int find2(int person, int parent[]){
    int community = person;
    while(parent[community] != community)
      community = parent[community];
    return community;
  }

  void union_communities2(int person1, int person2, int parent[], int size[], int num_community){
    int community1, community2;
    community1 = find2(person1, parent);
    community2 = find2(person2, parent);
    if(community1 != community2 && size[community1] + size[community2] <= num_community){
      parent[community1] = community2;
      size[community2] = size[community1] + size[community2];
    }
  }

  // The main function
  int main(){
    static int parent[MAX_PEOPLE + 1], size[MAX_PEOPLE + 1];
    int num_people, num_community, num_ops, i;
    char op;
    int person1, person2;
    scanf("%d%d", &num_people, &num_community);
    for(i=1; i<= num_people; i++){
      parent[i] = i;
      size[i] = 1;
    }
    scanf("%d", &num_ops);

    for(i=0; i<num_ops; i++){
      scanf(" %c", &op);

      if(op == 'A'){
        scanf("%d%d", &person1, &person2);
        union_communities2(person1, person2, parent, size, num_community);
      }

      else if(op == 'E'){
        scanf("%d%d", &person1, &person2);
        if(find2(person1, parent) == find2(person2, parent))
          printf("Yes\n");
        else
          printf("No\n");
      }
      else{
        scanf("%d", &person1);
        printf("%d\n", size[find2(person1, parent)]);
      }
    }
    return 0;
  }
#+end_src

#+RESULTS:
** Optimization 1: Union by Size
#+begin_src C
  <<uion_find>>



#+end_src

#+RESULTS:
** Optimization 2: Path Compression
#+begin_src C
  <<union_find>>
  int find(int person, int parent[]){
    int community = person, temp;
    while(parent[community] != community)
      community = parent[community];
    while(parent[person] != community){
      temp = parent[person];
      parent[person] = community;
      person = temp;
    }
    return community;
    }

#+end_src
