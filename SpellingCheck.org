#+TITLE: Spelling Check
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Thinking about Hash Tables (But not using them)
For this specific problem, an =hash table= is not the better
data structure to use.

#+begin_src C
  // Function to find the length of the longest common prefix
  int prefix_length(char s1[], char s2[]){
    int i = 1;
    while (s1[i] == s2[i]){
      i += 1;

    }
    return i - 1;
  }

  // Function to find the length of the longest common suffix
  int suffix_length(char s1[], char s2[], int len){
    int i = len;
    while(i>=2 && s1[i] == s2[i-1]){
      i--;

    }
    return len - i;
  }

  #define SIZE 1000000

  int main(){
    static char s1[SIZE+2], s2[SIZE+2];

    int len, prefix, suffix, total;

    gets(&s1[1]);
    gets(&s2[1]);

    len = strlen(&s1[1]);
    prefix = prefix_length(s1, s2);
    suffix = suffix_length(s1, s2, len);
    total = (prefix + 1) - (len - suffix) + 1;
    if(total < 0){
      total = 0;
    }

    printf("%d\n", total);
    for(int i = 0; i < total; i++){
      printf("%d", i+len - suffix);
      if(i < total - 1){
        printf(" ");
      }else{
        printf("\n");
      }

    }

    return 0;
  }
   #+end_src

   #+RESULTS:
   
