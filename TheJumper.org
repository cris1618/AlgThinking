#+TITLE: Burger Fervor
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Solution 1: Backward Formulation
   #+begin_src C :results output
     #define SIZE 1000
     #include<stdio.h>

     int min(int x, int y){
       if(x<y)
	 return x;
       else
	 return y;
     }
   
     int solve_ij(int cost[], int n, int i, int j, int memo[SIZE+1][SIZE+1]){
       int first, second;
       if(memo[i][j] != -2)
	 return memo[i][j];
       if(i == 2 && j == 1){
	 memo[i][j] = 0;
	 return memo[i][j];
       }
       if(i-j>=1 && j>=2)
	 first = solve_ij(cost, n, i-j, j-1, memo);
       else
	 first = -1;
       if(i+j<=n)
	 second = solve_ij(cost, n, i+j, j, memo);
       else
	 second = -1;
       if(first == -1 && second == -1){
	 memo[i][j] = -1;
	 return memo[i][j];
       } else if (second == -1){
	 memo[i][j] = first + cost[i];
	 return memo[i][j];
       }else if(first == -1){
	 memo[i][j] = second + cost[i];
	 return memo[i][j];
       }else{
	 memo[i][j] = min(first, second) + cost[i];
	 return memo[i][j];
       }

     }

     int solve(int cost[], int n){
       int i, j, best, result;
       static int memo[SIZE+1][SIZE+1];
       for(i=1; i<=SIZE; i++){
	 for(j=1; j<=SIZE; j++){
	   memo[i][j] = -2;
	 }
       }
       best = -1;
       for(j=1; j<=n; j++){
	 result = solve_ij(cost, n, n, j, memo);
	 if(result != -1){
	   if(best==-1)
	     best = cost[2] + result;
	   else
	     best = min(best, cost[2]+result);
	 }
       }
       return best;
     }

     // The Main Function
     int main(){
       int i, n;
       int cost[SIZE+1];
       scanf("%d ", &n);
       for(i=1; i<=n; i++)
	 scanf("%d", &cost[i]);
       printf("%d\n", solve(cost, n));
       return 0;
     }
   #+end_src

   #+RESULTS:
   : 0
