#+TITLE: Unique Snowflakes
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Solve a simplified problem
#+begin_src C :results output :tangle simple.c
  // Create a simple function to find identical integers in an array
  void identify_identical(int values[], int n){
    int i, j;

    for(i = 0; i<n; ++i){
      for(j = i + 1; j<n; ++i){
        if(values[i] == values[j]){
          printf("Twin integers found.\n");
          return;
        }

      }

    }
    printf("No Twin Integers are alike.\n");

  }


  int main(){
    int a[5] = {1, 2, 3, 1, 5};
    identify_identical(a, 5);
    return 0;


  }
  #+end_src

#+RESULTS:
: Twin integers found.

** Solving the core problem (Time-Limit Exceeded solution)
#+begin_src C :results output :tangle core.c
  // Function for 'Moving Right' case
  int identical_right(int snow1[], int snow2[], int start){
    int offset, snow2_index;

    for(offset = 0; offset < 6; offset++){
      snow2_index = (start + offset) % 6;

      if(snow1[offset] != snow2[snow2_index]){
        return 0;
      }
    }
    return 1;
  }

  int identical_left(int snow1[], int snow2[], int start){
    int offset, snow2_index;

    for(offset = 0; offset < 6; offset++){
      snow2_index = start - offset;

      if(snow2_index <= 1){
        snow2_index = snow2_index + 6;
      }
      if(snow1[offset] != snow2[snow2_index]){
        return 0;
      }
    }
    return 1;
  }

  int are_identical(int snow1[],int snow2[]){
    int start;

    for(start = 0; start < 6; start++){
      if (identical_right(snow1, snow2, start)){
        return 1;

      }
      if (identical_left(snow1, snow2, start)){
        return 1;
      }
    }
    return 0;
  }


  void identify_identical(int snowflakes[][6], int n){
    int i, j;

    for(i = 0; i<n; i++){
      for(j = 0; j<n; j++){
        if(are_identical(snowflakes[i], snowflakes[j])){
          printf("Twin snowflakes found.\n");
          return;
        }

      } 

    }

    printf("No two snowflakes are alike.");
  }

  #define SIZE 100000
  int main(){
    static int snowflakes[SIZE][6];

    int n, i, j;

    scanf("%d", &n);

    for(i = 0; i<n; i++){
      for(j = 0; j<6; j++){
        scanf("%d", &snowflakes[i][j]);
        are_identical(snowflakes, n);

      }

    }


    return 0;
  }
#+end_src
** Optimize the solution

#+NAME: Doing Less Work
#+begin_src C :results output :tangle opt.c
  #include <stdlib.h>
  #define SIZE 100000
  // Import important functions from previous code block
  int identical_right(int snow1[], int snow2[], int start){
    int offset, snow2_index;

    for(offset = 0; offset < 6; offset++){
      snow2_index = (start + offset) % 6;

      if(snow1[offset] != snow2[snow2_index]){
        return 0;
      }
    }
    return 1;
  }

  int identical_left(int snow1[], int snow2[], int start){
    int offset, snow2_index;

    for(offset = 0; offset < 6; offset++){
      snow2_index = start - offset;

      if(snow2_index <= 1){
        snow2_index = snow2_index + 6;
      }
      if(snow1[offset] != snow2[snow2_index]){
        return 0;
      }
    }
    return 1;
  }

  int are_identical(int snow1[],int snow2[]){
    int start;

    for(start = 0; start < 6; start++){
      if (identical_right(snow1, snow2, start)){
        return 1;

      }
      if (identical_left(snow1, snow2, start)){
        return 1;
      }
    }
    return 0;
  }


 
  // Calculating Sum Codes
  int code(int snowflakes[]){
    return(snowflakes[0] + snowflakes[1] + snowflakes[2] +
           snowflakes[3] + snowflakes[4] + snowflakes[5]) % SIZE;
  }

  // Create a linked list in a struct
  typedef struct snowflake_node{
    int snowflake[6];
    struct snowflake_node *next;

  } snowflake_node;


  // The new main function
  void identify_identical(snowflake_node *snowflakes[]);


  void identify_identical(snowflake_node *snowflakes[]){
    snowflake_node *node1, *node2;    
    int i;

    for(i = 0; i<SIZE; i++){
      node1 = snowflakes[i];
      while(node1 != NULL){
        node2 = node1 -> next;
        while(node2 != NULL){
          if(are_identical(node1->snowflake, node2-> snowflake)){
            printf("Twin Snowflakes Found.\n");
            return 0;
          }
          node2 = node2->next;
        }
        node1 = node1->next;
      }
    }
    printf("No Two snowflakes are alike");
  }


  int main(){
    static snowflake_node *snowflakes[SIZE] = {NULL};
    snowflake_node *snow;

    int n, i, j, snowflake_code;

    scanf("%d", &n);

    for(i=0; i<n; i++){
      snow = malloc(sizeof(snowflake_node));
      if(snow == NULL){
        fprintf(stderr, "Malloc Error\n");
        exit(1);
      }
      for(j=0; j<6; j++){
        scanf("%d", &snow->snowflake[j]);
        snowflake_code = code(snow->snowflake);

        snow-> next = snowflakes[snowflake_code];

        snowflakes[snowflake_code] = snow;
      }

    }
    identify_identical(snowflakes);
    return 0;
  }
#+end_src

#+RESULTS: Doing Less Work
: No Two snowflakes are alike
** Solution without malloc (Appendix B)
#+begin_src C
  #define SIZE 100000
  // Modified function
  void identify_identical(int snowflakes[][6], int heads[], int nodes[]){
    int i, node1, node2;
    for(i=0; i<SIZE; i++){
      node1 = heads[i];
      while(node1 != -1){
        node2 = nodes[node1];
        while(node2 != -1){
          if(are_identical(snowflakes[node1], snowflakes[node2])){
            printf("Twin snowflakes found.\n");
            return;
          }
          node2 = nodes[node2];
        }
        node1 = nodes[node1];
      }
    }
    printf("No two snowflakes are alike.\n");
  }

  // Modified Main Function
  int main(){
    static int snowflakes[SIZE][6];
    static int heads[SIZE];
    static int nodes[SIZE];

    int n;
    int i, j, snowflake_code;
    for(i=0; i<SIZE; i++){
      heads[i] = -1;
      nodes[i] = -1;
    }
    scanf("%d", &n);
    for(i=0; i<n; i++){
      for(j=0; j<6; j++)
        scanf("%d", %snowflakes[i]);
      snowflake_code = code(snowflakes[i]);
      nodes[i] = heads[snowflake_code];
      heads[snowflake_code] = i;
    }
    identify_identical(snowflakes, heads, nodes);
    return 0;
  }
#+end_src
