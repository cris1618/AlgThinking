#+TITLE: Ways To Build
#+AUTHOR: Cristian Del Gobbo (pledged)
#+SUBTITLE: Problem taken from the book "Algorithmic Thinking" by Daniel Zingaro
#+STARTUP: overview hideblocks indent
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :results output

** Solution 1: Using "Exactly" Subproblems
   #+begin_src C :results output
     #define MAX_A 1000
     #define MAX_B 200
     #define MAX_K 200
     #define MOD 1000000007

     int solve_ijk(char a[], char b[], int i, int j, int k, int memo[MAX_A][MAX_B][MAX_K+1]){
       int total, q;
       if(memo[i][j][k] != -1)
         return memo[i][j][k];
       if(j==0 && k==1 && a[i] == b[j]){
         memo[i][j][k] = 1;
         return memo[i][j][k];
       }
       if(i==0 || j==0 || k==0){
         memo[i][j][k] = 0;
         return memo[i][j][k];
       }
       if(a[i] != b[j]){
         memo[i][j][k] = 0;
         return memo[i][j][k];
       }
       total = 0;
       for(q = 0; q<i; q++)
         total = (total + solve_ijk(a, b, q, j-1, k-1, memo))%MOD;
       total = (total + solve_ijk(a, b, i-1, j-1, k, memo))%MOD;
       memo[i][j][k] = total;
       return memo[i][j][k];
     }

     int solve(char a[], char b[], int a_length, int b_length, int num_substrings){
       int i, j, k, result;
       static int memo[MAX_A][MAX_B][MAX_K + 1];
       for(i=0; i<a_length; i++)
         for(j=0; j<b_length; j++)
           for(k=0; k<=num_substrings; k++)
             memo[i][j][k] = -1;
       result = 0;
       for(i=0; i<a_length; i++){
         result = result + solve_ijk(a, b, i, b_length - 1, num_substrings, memo);
         result = result % MOD;
       }
       return result;
     }

     // The Main Function
     int main(){
       int a_length, b_length, num_substrings;
       char a[MAX_A + 1], b[MAX_B + 1];
       scanf("%d%d%d", &a_length, &b_length, &num_substrings);
       scanf("%s", a);
       scanf("%s", b);
       printf("%d\n", solve(a, b, a_length, b_length, num_substrings));
       return 0;
     }
   #+end_src

   #+RESULTS:
   : 0
** Solution 2: Adding more Subproblems
#+begin_src C :results output
  #define MAX_A 1000
  #define MAX_B 200
  #define MAX_K 200
  #define MOD 1000000007

  typedef struct pair{
    int end_at_i;
    int total;
  }pair;

  pair solve(char a[], char b[], int i, int j, int k, pair memo[MAX_A][MAX_B][MAX_K + 1]){
    int total, end_at_i;
    if(memo[i][j][k].total != -1)
      return memo[i][j][k];
    if(j==0 && k == 1){
      if(a[i] != b[j]){
        if(i==0)
          total = 0;
        else 
          total = solve(a, b, i-1, j, k, memo).total;
        memo[i][j][k] = (pair){0, total};
      }else{
        if(i==0)
          total = 1;
        else 
          total = 1 + solve(a, b, i-1, j, k, memo).total;
        memo[i][j][k] = (pair){1, total};
      }
      return memo[i][j][k];
    }
    if(i==0 || j==0 || k==0){
      memo[i][j][k] = (pair){0,0};
      return memo[i][j][k];
    }
    if(a[i] != b[j])
      end_at_i = 0;
    else{
      end_at_i = (solve(a, b, i-1, j-1, k-1, memo).total + solve(a, b, i-1, j-1, k, memo).end_at_i);
      end_at_i = end_at_i % MOD;
    }
    total = (end_at_i + solve(a, b, i-1, j, k, memo).total) % MOD;
    memo[i][j][k] = (pair){end_at_i, total};
    return memo[i][j][k];
  }

  // The Main Function
  int main(){
    int a_length, b_length, num_substrings, i, j, k, result;
    char a[MAX_A + 1];
    char b[MAX_B + 1];

    static pair memo[MAX_A][MAX_B][MAX_K + 1];
    scanf("%d%d%d", &a_length, &b_length, &num_substrings);
    scanf("%s", a);
    scanf("%s", b);
    for(i=0; i<a_length; i++)
      for(j=0; j<b_length; j++)
        for(k=0; k<=num_substrings; k++)
          memo[i][j][k] = (pair){-1, 1};
    result = solve(a, b, a_length - 1, b_length - 1, num_substrings, memo).total;
    printf("%d\n", result);
    return 0;
  }

#+end_src

#+RESULTS:
